Ex 1.1: Moving around in Emacs
   1. C-x C-f e x e r 1 Tab Enter
   2. C-s U T F - 8
   3. C-s I n s t r u c t i o n s C-s
   4. C-s H T M L M-b C-f
   5. C-s a r r o w M-b
   6. C-e
   7. C-a
   8. M-x g o t o - l i n e Enter 1 Enter
   9. Nope
   10. Yes
   11. C-x C-c

Ex 1.2: Deleting text in Emacs
   1. C-x C-f e x e r 2 Tab Enter
   2. M-x g o t o - l i n e Enter 1 8 Enter C-k
   3. C-M-s D E L E T E M E . * SP - - > Enter C-a C-k
   4. C-M-s w i k i p e d i a . * SP - - > Enter C-M-h C-w
   5. C-M-s < ! - - . * - - > Enter Backspace C-x z z z z z z

Ex 1.3: Inserting text in Emacs
   1. C-x C-f e x e r 3 Tab Enter
   2. M-% A s s i g n m e n t SP 1 Enter
      A s s i g n m e n t SP 3 7 Enter SP SP Return
   3. M-% U T F - 8 Enter U S - A S C I I Enter SP
   4. C-s < o l > Enter Enter
   5. C-x C-s C-x C-c

Ex 1.4: Other editing tasks in Emacs
   3. M-> C-p C-p C-p C-p C-p C-f C-k C-r s h o u l d Enter C-a C-k C-y M-y
   4. M-> C-p ... C-p C-k M-x g o t o - l i n e 2 9 8/9 1/1 5 C-y
   5. M-> C-M-h C-w
   6. C-x u
   7. M-> - - > C-M-a C-n < ! - - Enter
   8. M-< M-% < o l > Enter < O l > Enter SP SP SP SP SP SP SP

Ex 1.5: Doint commands in Emacs
   1. M-x m a k e - d i r e c t o r y Enter ~ / j u n k
   2. C-x d ~/junk Enter
      C-x b h e l l o . c (Copy from Webpage) C-y C-x C-w h e l l o . c Enter
   3. M-x C o m p i l i e Enter g c c SP h e l l o . c SP - o SP h e y Enter
   4. M-x C o m p i l i e Enter . / h e y Enter
      C-x b * c o m p i l a t i o n *
      C-x C-w h e l l o - o u t Enter
   
   5. C-x C-f h e l l o - o u t Enter M-> M-w
      C-x C-f k e y 1 . t x t Enter M-> C-y

-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Thu Jan  7 14:24:52

./hey
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Thu Jan  7 14:24:52

Ex 1.6:Running Lisp code
   1. C-x b * s c r a t c h *
   2. ( r a n d o m ) C-j

 * First I tried random with no limit included
   (the result are very large numbers)
   
   3. ( s e t q SP x SP ( r a n d o m ) ) C-j
      ( s e t q SP y SP ( r a n d o m ) ) C-j
      ( s e t q SP z SP ( r a n d o m ) ) C-j

   4. ( * SP x SP y SP z ) C-j

      The result is not mathematically correct. This may due to overflow

   5.  M-: ( * x SP y SP z ) C-j

      Still mathematically incorrect for the product of very large numbers.

 * Then I repeated the steps with limit included.
   3. ( s e t q SP x SP ( r a n d o m SP 100 ) ) C-j
      ( s e t q SP y SP ( r a n d o m SP 100 ) ) C-j
      ( s e t q SP z SP ( r a n d o m SP 100 ) ) C-j

   4. ( * SP x SP y SP z ) C-j

      The result is mathematically correct for every reasonable limit inluded.

   5.  M-: ( * x SP y SP z ) C-j

       The result is correct
   

   6. Not really. A specific seeds is set to generate the pseudo-random numbers
      (Repeated calls return a series of pseudo-random integers.) 
